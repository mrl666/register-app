/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package register.app.backend.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import register.app.backend.model.RegisterUser;
import register.app.backend.model.RegisterUserModel;
import register.app.backend.model.RegisterUserSoap;

/**
 * The base model implementation for the RegisterUser service. Represents a row in the &quot;RegisterApp_RegisterUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RegisterUserModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegisterUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RegisterUserImpl
 * @generated
 */
@JSON(strict = true)
public class RegisterUserModelImpl
	extends BaseModelImpl<RegisterUser> implements RegisterUserModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a register user model instance should use the <code>RegisterUser</code> interface instead.
	 */
	public static final String TABLE_NAME = "RegisterApp_RegisterUser";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"registerUserId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"surname", Types.VARCHAR},
		{"lastname", Types.VARCHAR}, {"nationalId", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"questionType", Types.VARCHAR},
		{"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("registerUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("surname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("questionType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table RegisterApp_RegisterUser (uuid_ VARCHAR(75) null,registerUserId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,surname VARCHAR(75) null,lastname VARCHAR(75) null,nationalId VARCHAR(75) null,email VARCHAR(75) null,questionType VARCHAR(75) null,description VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table RegisterApp_RegisterUser";

	public static final String ORDER_BY_JPQL =
		" ORDER BY registerUser.nationalId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY RegisterApp_RegisterUser.nationalId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static RegisterUser toModel(RegisterUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RegisterUser model = new RegisterUserImpl();

		model.setUuid(soapModel.getUuid());
		model.setRegisterUserId(soapModel.getRegisterUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setSurname(soapModel.getSurname());
		model.setLastname(soapModel.getLastname());
		model.setNationalId(soapModel.getNationalId());
		model.setEmail(soapModel.getEmail());
		model.setQuestionType(soapModel.getQuestionType());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<RegisterUser> toModels(RegisterUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RegisterUser> models = new ArrayList<RegisterUser>(
			soapModels.length);

		for (RegisterUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public RegisterUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _registerUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRegisterUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _registerUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RegisterUser.class;
	}

	@Override
	public String getModelClassName() {
		return RegisterUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RegisterUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RegisterUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegisterUser, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RegisterUser)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RegisterUser, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RegisterUser, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RegisterUser)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RegisterUser, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RegisterUser, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<RegisterUser, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RegisterUser, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RegisterUser, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<RegisterUser, Object>>();
		Map<String, BiConsumer<RegisterUser, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RegisterUser, ?>>();

		attributeGetterFunctions.put("uuid", RegisterUser::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<RegisterUser, String>)RegisterUser::setUuid);
		attributeGetterFunctions.put(
			"registerUserId", RegisterUser::getRegisterUserId);
		attributeSetterBiConsumers.put(
			"registerUserId",
			(BiConsumer<RegisterUser, Long>)RegisterUser::setRegisterUserId);
		attributeGetterFunctions.put("groupId", RegisterUser::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<RegisterUser, Long>)RegisterUser::setGroupId);
		attributeGetterFunctions.put("companyId", RegisterUser::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<RegisterUser, Long>)RegisterUser::setCompanyId);
		attributeGetterFunctions.put("userId", RegisterUser::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<RegisterUser, Long>)RegisterUser::setUserId);
		attributeGetterFunctions.put("userName", RegisterUser::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<RegisterUser, String>)RegisterUser::setUserName);
		attributeGetterFunctions.put("createDate", RegisterUser::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<RegisterUser, Date>)RegisterUser::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", RegisterUser::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<RegisterUser, Date>)RegisterUser::setModifiedDate);
		attributeGetterFunctions.put("name", RegisterUser::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<RegisterUser, String>)RegisterUser::setName);
		attributeGetterFunctions.put("surname", RegisterUser::getSurname);
		attributeSetterBiConsumers.put(
			"surname",
			(BiConsumer<RegisterUser, String>)RegisterUser::setSurname);
		attributeGetterFunctions.put("lastname", RegisterUser::getLastname);
		attributeSetterBiConsumers.put(
			"lastname",
			(BiConsumer<RegisterUser, String>)RegisterUser::setLastname);
		attributeGetterFunctions.put("nationalId", RegisterUser::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<RegisterUser, String>)RegisterUser::setNationalId);
		attributeGetterFunctions.put("email", RegisterUser::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<RegisterUser, String>)RegisterUser::setEmail);
		attributeGetterFunctions.put(
			"questionType", RegisterUser::getQuestionType);
		attributeSetterBiConsumers.put(
			"questionType",
			(BiConsumer<RegisterUser, String>)RegisterUser::setQuestionType);
		attributeGetterFunctions.put(
			"description", RegisterUser::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<RegisterUser, String>)RegisterUser::setDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getRegisterUserId() {
		return _registerUserId;
	}

	@Override
	public void setRegisterUserId(long registerUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_registerUserId = registerUserId;
	}

	@Override
	public String getRegisterUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getRegisterUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setRegisterUserUuid(String registerUserUuid) {
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalName() {
		return getColumnOriginalValue("name");
	}

	@JSON
	@Override
	public String getSurname() {
		if (_surname == null) {
			return "";
		}
		else {
			return _surname;
		}
	}

	@Override
	public void setSurname(String surname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_surname = surname;
	}

	@JSON
	@Override
	public String getLastname() {
		if (_lastname == null) {
			return "";
		}
		else {
			return _lastname;
		}
	}

	@Override
	public void setLastname(String lastname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastname = lastname;
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getQuestionType() {
		if (_questionType == null) {
			return "";
		}
		else {
			return _questionType;
		}
	}

	@Override
	public void setQuestionType(String questionType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_questionType = questionType;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(RegisterUser.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), RegisterUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RegisterUser toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, RegisterUser>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegisterUserImpl registerUserImpl = new RegisterUserImpl();

		registerUserImpl.setUuid(getUuid());
		registerUserImpl.setRegisterUserId(getRegisterUserId());
		registerUserImpl.setGroupId(getGroupId());
		registerUserImpl.setCompanyId(getCompanyId());
		registerUserImpl.setUserId(getUserId());
		registerUserImpl.setUserName(getUserName());
		registerUserImpl.setCreateDate(getCreateDate());
		registerUserImpl.setModifiedDate(getModifiedDate());
		registerUserImpl.setName(getName());
		registerUserImpl.setSurname(getSurname());
		registerUserImpl.setLastname(getLastname());
		registerUserImpl.setNationalId(getNationalId());
		registerUserImpl.setEmail(getEmail());
		registerUserImpl.setQuestionType(getQuestionType());
		registerUserImpl.setDescription(getDescription());

		registerUserImpl.resetOriginalValues();

		return registerUserImpl;
	}

	@Override
	public int compareTo(RegisterUser registerUser) {
		int value = 0;

		value = getNationalId().compareTo(registerUser.getNationalId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof RegisterUser)) {
			return false;
		}

		RegisterUser registerUser = (RegisterUser)object;

		long primaryKey = registerUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<RegisterUser> toCacheModel() {
		RegisterUserCacheModel registerUserCacheModel =
			new RegisterUserCacheModel();

		registerUserCacheModel.uuid = getUuid();

		String uuid = registerUserCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			registerUserCacheModel.uuid = null;
		}

		registerUserCacheModel.registerUserId = getRegisterUserId();

		registerUserCacheModel.groupId = getGroupId();

		registerUserCacheModel.companyId = getCompanyId();

		registerUserCacheModel.userId = getUserId();

		registerUserCacheModel.userName = getUserName();

		String userName = registerUserCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			registerUserCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			registerUserCacheModel.createDate = createDate.getTime();
		}
		else {
			registerUserCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			registerUserCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			registerUserCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		registerUserCacheModel.name = getName();

		String name = registerUserCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			registerUserCacheModel.name = null;
		}

		registerUserCacheModel.surname = getSurname();

		String surname = registerUserCacheModel.surname;

		if ((surname != null) && (surname.length() == 0)) {
			registerUserCacheModel.surname = null;
		}

		registerUserCacheModel.lastname = getLastname();

		String lastname = registerUserCacheModel.lastname;

		if ((lastname != null) && (lastname.length() == 0)) {
			registerUserCacheModel.lastname = null;
		}

		registerUserCacheModel.nationalId = getNationalId();

		String nationalId = registerUserCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			registerUserCacheModel.nationalId = null;
		}

		registerUserCacheModel.email = getEmail();

		String email = registerUserCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			registerUserCacheModel.email = null;
		}

		registerUserCacheModel.questionType = getQuestionType();

		String questionType = registerUserCacheModel.questionType;

		if ((questionType != null) && (questionType.length() == 0)) {
			registerUserCacheModel.questionType = null;
		}

		registerUserCacheModel.description = getDescription();

		String description = registerUserCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			registerUserCacheModel.description = null;
		}

		return registerUserCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RegisterUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RegisterUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegisterUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((RegisterUser)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RegisterUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RegisterUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RegisterUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RegisterUser)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, RegisterUser>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					RegisterUser.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _registerUserId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _surname;
	private String _lastname;
	private String _nationalId;
	private String _email;
	private String _questionType;
	private String _description;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<RegisterUser, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((RegisterUser)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("registerUserId", _registerUserId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("surname", _surname);
		_columnOriginalValues.put("lastname", _lastname);
		_columnOriginalValues.put("nationalId", _nationalId);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("questionType", _questionType);
		_columnOriginalValues.put("description", _description);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("registerUserId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("name", 256L);

		columnBitmasks.put("surname", 512L);

		columnBitmasks.put("lastname", 1024L);

		columnBitmasks.put("nationalId", 2048L);

		columnBitmasks.put("email", 4096L);

		columnBitmasks.put("questionType", 8192L);

		columnBitmasks.put("description", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private RegisterUser _escapedModel;

}